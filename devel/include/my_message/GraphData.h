// Generated by gencpp from file my_message/GraphData.msg
// DO NOT EDIT!


#ifndef MY_MESSAGE_MESSAGE_GRAPHDATA_H
#define MY_MESSAGE_MESSAGE_GRAPHDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_message
{
template <class ContainerAllocator>
struct GraphData_
{
  typedef GraphData_<ContainerAllocator> Type;

  GraphData_()
    : ms_error(0.0)
    , y_desired(0.0)
    , y_sensed(0.0)
    , x_value(0.0)  {
    }
  GraphData_(const ContainerAllocator& _alloc)
    : ms_error(0.0)
    , y_desired(0.0)
    , y_sensed(0.0)
    , x_value(0.0)  {
  (void)_alloc;
    }



   typedef float _ms_error_type;
  _ms_error_type ms_error;

   typedef float _y_desired_type;
  _y_desired_type y_desired;

   typedef float _y_sensed_type;
  _y_sensed_type y_sensed;

   typedef float _x_value_type;
  _x_value_type x_value;





  typedef boost::shared_ptr< ::my_message::GraphData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_message::GraphData_<ContainerAllocator> const> ConstPtr;

}; // struct GraphData_

typedef ::my_message::GraphData_<std::allocator<void> > GraphData;

typedef boost::shared_ptr< ::my_message::GraphData > GraphDataPtr;
typedef boost::shared_ptr< ::my_message::GraphData const> GraphDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_message::GraphData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_message::GraphData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_message::GraphData_<ContainerAllocator1> & lhs, const ::my_message::GraphData_<ContainerAllocator2> & rhs)
{
  return lhs.ms_error == rhs.ms_error &&
    lhs.y_desired == rhs.y_desired &&
    lhs.y_sensed == rhs.y_sensed &&
    lhs.x_value == rhs.x_value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_message::GraphData_<ContainerAllocator1> & lhs, const ::my_message::GraphData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_message

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::my_message::GraphData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_message::GraphData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_message::GraphData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_message::GraphData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_message::GraphData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_message::GraphData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_message::GraphData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6b8316f3e4d87486410c1f8c55c6794f";
  }

  static const char* value(const ::my_message::GraphData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6b8316f3e4d87486ULL;
  static const uint64_t static_value2 = 0x410c1f8c55c6794fULL;
};

template<class ContainerAllocator>
struct DataType< ::my_message::GraphData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_message/GraphData";
  }

  static const char* value(const ::my_message::GraphData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_message::GraphData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 ms_error \n"
"float32 y_desired\n"
"float32 y_sensed\n"
"float32 x_value\n"
;
  }

  static const char* value(const ::my_message::GraphData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_message::GraphData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ms_error);
      stream.next(m.y_desired);
      stream.next(m.y_sensed);
      stream.next(m.x_value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GraphData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_message::GraphData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_message::GraphData_<ContainerAllocator>& v)
  {
    s << indent << "ms_error: ";
    Printer<float>::stream(s, indent + "  ", v.ms_error);
    s << indent << "y_desired: ";
    Printer<float>::stream(s, indent + "  ", v.y_desired);
    s << indent << "y_sensed: ";
    Printer<float>::stream(s, indent + "  ", v.y_sensed);
    s << indent << "x_value: ";
    Printer<float>::stream(s, indent + "  ", v.x_value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_MESSAGE_MESSAGE_GRAPHDATA_H
